; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "CherryTree"
#define MyAppPublisher "Giuseppe Penone"
#define MyAppURL "https://www.giuspen.net/cherrytree/"
#define MyAppExeName "cherrytree.exe"
#define MyAppVersion GetFileVersion('C:\msys64\home\PenoneG\git\cherrytree\build\cherrytree.exe')

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
AppId={{DBA7384C-E1C6-44B5-A3B4-C94F2F0B8C0C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
OutputDir=C:\msys64\home\PenoneG\git\cherrytree\build
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64
LicenseFile=C:\msys64\home\PenoneG\git\cherrytree\build\cherrytree_{#MyAppVersion}_win64_portable\license.txt
;PrivilegesRequired=lowest
OutputBaseFilename=cherrytree_{#MyAppVersion}_win64_setup
SetupIconFile=C:\msys64\home\PenoneG\git\cherrytree\icons\cherrytree.ico
Compression=lzma2
SolidCompression=yes
WizardStyle=modern
ChangesAssociations=yes
UninstallDisplayIcon={app}\ucrt64\bin\{#MyAppExeName}

[Registry]
Root: HKCR; Subkey: ".ctb"; ValueType: string; ValueName: ""; ValueData: "CherryTreeB"; Flags: uninsdeletevalue
Root: HKCR; Subkey: "CherryTreeB"; ValueType: string; ValueName: ""; ValueData: "CherryTree SQLite Document"; Flags: uninsdeletekey
Root: HKCR; Subkey: "CherryTreeB\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\ucrt64\bin\{#MyAppExeName},0"
Root: HKCR; Subkey: "CherryTreeB\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\ucrt64\bin\{#MyAppExeName}"" ""%1"""
Root: HKCR; Subkey: ".ctx"; ValueType: string; ValueName: ""; ValueData: "CherryTreeX"; Flags: uninsdeletevalue
Root: HKCR; Subkey: "CherryTreeX"; ValueType: string; ValueName: ""; ValueData: "CherryTree SQLite Zipped"; Flags: uninsdeletekey
Root: HKCR; Subkey: "CherryTreeX\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\ucrt64\bin\{#MyAppExeName},0"
Root: HKCR; Subkey: "CherryTreeX\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\ucrt64\bin\{#MyAppExeName}"" ""%1"""
Root: HKCR; Subkey: ".ctd"; ValueType: string; ValueName: ""; ValueData: "CherryTreeD"; Flags: uninsdeletevalue
Root: HKCR; Subkey: "CherryTreeD"; ValueType: string; ValueName: ""; ValueData: "CherryTree XML Document"; Flags: uninsdeletekey
Root: HKCR; Subkey: "CherryTreeD\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\ucrt64\bin\{#MyAppExeName},0"
Root: HKCR; Subkey: "CherryTreeD\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\ucrt64\bin\{#MyAppExeName}"" ""%1"""
Root: HKCR; Subkey: ".ctz"; ValueType: string; ValueName: ""; ValueData: "CherryTreeZ"; Flags: uninsdeletevalue
Root: HKCR; Subkey: "CherryTreeZ"; ValueType: string; ValueName: ""; ValueData: "CherryTree XML Zipped"; Flags: uninsdeletekey
Root: HKCR; Subkey: "CherryTreeZ\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\ucrt64\bin\{#MyAppExeName},0"
Root: HKCR; Subkey: "CherryTreeZ\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\ucrt64\bin\{#MyAppExeName}"" ""%1"""

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
// ... (rest of the languages)

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\msys64\home\PenoneG\git\cherrytree\build\cherrytree_{#MyAppVersion}_win64_portable\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\ucrt64\bin\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\ucrt64\bin\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\ucrt64\bin\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
var
  OldUninstallerPath: String;
  ShouldUninstall: Boolean;

// Final function to find the uninstaller path, compatible with Inno Setup 5
// and aware of 32/64-bit registry redirection.
function GetUninstallString_Final(): String;
var
  UninstallKey: string;
  UninstallPath: string;
begin
  Result := '';
  
  // --- Check 1: The most common location for a 32-bit app on a 64-bit system ---
  UninstallKey := 'Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\' + '{#SetupSetting("AppId")}' + '_is1';
  if RegQueryStringValue(HKLM, UninstallKey, 'UninstallString', UninstallPath) then
  begin
    Result := UninstallPath;
    exit;
  end;

  // --- Check 2: The standard 64-bit and user-specific locations ---
  UninstallKey := 'Software\Microsoft\Windows\CurrentVersion\Uninstall\' + '{#SetupSetting("AppId")}' + '_is1';
  if RegQueryStringValue(HKLM, UninstallKey, 'UninstallString', UninstallPath) then
  begin
    Result := UninstallPath;
    exit;
  end;
  
  if RegQueryStringValue(HKCU, UninstallKey, 'UninstallString', UninstallPath) then
  begin
    Result := UninstallPath;
    exit;
  end;
end;

function InitializeSetup(): Boolean;
begin
  OldUninstallerPath := GetUninstallString_Final();

  if OldUninstallerPath <> '' then
  begin
    ShouldUninstall := (MsgBox('An older version of {#MyAppName} is already installed. Would you like to remove it before installing the new version?', mbConfirmation, MB_YESNO) = IDYES);
    
    if not ShouldUninstall then
    begin
      MsgBox('Setup cannot continue because the previous version was not uninstalled. Setup will now exit.', mbInformation, MB_OK);
      Result := False; // Abort setup if user selects No
    end
    else
    begin
      Result := True; // Proceed with setup
    end;
  end
  else
  begin
    ShouldUninstall := False;
    Result := True; // No old version found, proceed as normal
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
begin
  if (CurStep = ssInstall) and ShouldUninstall then
  begin
    if Exec(OldUninstallerPath, '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    begin
      Log(Format('The previous version uninstaller finished with exit code: %d', [ResultCode]));
    end
    else
    begin
      Log(Format('The previous version uninstaller failed to run. Exit code: %d', [ResultCode]));
    end;
  end;
end;
